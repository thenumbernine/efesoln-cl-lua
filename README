Newton descent across the Einstein Field Equation constraints
solve the metric using the norm of G_ab = 8 pi T_ab
This is gonna be like my EinsteinFieldEquationSolution project, but using OpenCL
And now I'm going to do the legwork and finish the math to calculate the gradient descent directly, rather than numerically approximating it.
And I'm adding lots of metaprogramming, which means Lua markup, which is more difficult to write out in C++.
Which means I'm skipping the C++.  Hooray!

How it works:

1) provide initial stress-energy conditions, in terms of primitives (not T_ab, because that depends on g_ab)

2) provide initial metric primitivies

3) solve the quadratic function G_ab = 8 pi T_ab, where G_ab is derived from the metric prims, and T_ab is derived from the stress-energy (and metric) prims

I'm using the render.lua from my EinsteinFieldEquationSolution project to display the results.  Maybe I'll put it in a repo of its own ...  Maybe I'll put it in a repo of its own ...  Maybe I'll put it in a repo of its own ...  Maybe I'll put it in a repo of its own ...  Maybe I'll put it in a repo of its own ...  Maybe I'll put it in a repo of its own ...  Maybe I'll put it in a repo of its own ...  Maybe I'll put it in a repo of its own ...  Maybe I'll put it in a repo of its own ... 

Requires:

luajit ffi
malkia's ufo
lua-ext
lua-vec
lua-cl
my ffi bindings (which include my ffi vector classes)
template-lua
symmath-lua
