#include "autogen.h"
#include "math.hpp"
#include "efe.h"

// TODO maybe put the kernel in here
// then use this + efe.cl for the solver
// and use display + efe.cl for the display

// init

kernel void init_gPrims(
	constant env_t const * const env,
	global gPrim_t * const gPrims,
	int initCond
) {
	initKernel();
	real3 const x = getX(env, i);

	global gPrim_t * const gPrim = gPrims + index;

	if (0) {
<? for i,initCond in ipairs(solver.initConds) do
?>
	} else if (initCond == <?=i?>) {
		*gPrim = <?=initCond.code?>(x);
<? end
?>	} else {
		*gPrim = gPrim_t(
			-1,
			real3(-2, -3, -4),
			real3s3(
				-5, -6, -7,
				-8, -9,
				-10
			)
		);
	}
}

kernel void init_TPrims(
	constant env_t const * const env,
	global <?=TPrim_t?> * const TPrims
) {
	initKernel();

	global <?=TPrim_t?> * const TPrim = TPrims + index;

	*TPrim = (<?=TPrim_t?>){
<? if solver.body.useMatter then ?>
		.rho = 0,
		.eInt = 0,
		.P = 0,
<? 	if solver.body.useVel then ?>
		.v = real3_zero,
<? 	end
end
if solver.body.useEM then ?>
		.E = real3_zero,
		.B = real3_zero,
<? end ?>
	};

<?=solver.body.init and solver.body.init or ''?>

<? if solver.useFourPotential then ?>
	TPrim->AL = -TPrim->JU;
<? end ?>
}

// compute buffers to compute EFE

kernel void calc_GammaULLs(
	constant env_t const * const env,
	global real4x4s4 * const GammaULLs,
	global gPrim_t const * const gPrims
) {
	initKernel();

	//partial_xU_of_gLL.c.ab := ∂/∂x^c(g_ab) = g_ab,c
#if 1 //debugging nans
<?=solver:finiteDifference{
	srcType = "4s4",
	resultName = "partial_xU_of_gLL",
	getValue = function(args) return "gLL_from_gPrims_at(env, gPrims, "..args.i..")" end,
	getBoundary = function(args) return "gLL_from_gPrims_at(env, gPrims, "..args.i..")" end,
}?>
#else
	//partial_xU_of_gLL.c.ab := ∂/∂x^c(g_ab) = g_ab,c
	real4x4s4 gLL_L;
	//gLL_L.s0 = real4s4();
	for (int a = 0; a < 10; ++a) {
		gLL_L.s0.s[a] = 0;
	}
	gLL_L.s1 = gLL_from_gPrims_at(env, gPrims, i - (int4)(1, 0, 0, 0));
	gLL_L.s2 = gLL_from_gPrims_at(env, gPrims, i - (int4)(0, 1, 0, 0));
	gLL_L.s3 = gLL_from_gPrims_at(env, gPrims, i - (int4)(0, 0, 1, 0));
	real4x4s4 gLL_R;
	//gLL_R.s0 = real4s4();
	for (int a = 0; a < 10; ++a) {
		gLL_R.s0.s[a] = 0;
	}
	gLL_R.s1 = gLL_from_gPrims_at(env, gPrims, i + (int4)(1, 0, 0, 0));
	gLL_R.s2 = gLL_from_gPrims_at(env, gPrims, i + (int4)(0, 1, 0, 0));
	gLL_R.s3 = gLL_from_gPrims_at(env, gPrims, i + (int4)(0, 0, 1, 0));
	real4x4s4 partial_xU_of_gLL;
	for (int bc = 0; bc < 10; ++bc) {
		partial_xU_of_gLL.s[0].s[bc] = 0;
	}
	for (int a = 1; a < stDim; ++a) {
		for (int bc = 0; bc < 10; ++bc) {
			partial_xU_of_gLL.s[a].s[bc] = (gLL_R.s[a].s[bc] - gLL_L.s[a].s[bc]) * .5 *  env->invdx.s[a-1];
		}
	}
#endif

#if 0 //debugging nans
	// spirv target
	// GammaULL calculation produces all nans
	// writing g_ab,c instead just gives nans for the 2nd 3rd 4th entries tho
	//GammaULLs[index] = partial_xU_of_gLL;
	for (int i = 0; i < 4; ++i) {
		for (int j = 0; j < 10; ++j) {
			//same, nans
			//GammaULLs[index].s[i].s[j] = partial_xU_of_gLL.s[i].s[j];
			//works
			GammaULLs[index].s[i].s[j] = i + j;
		}
	}
	return;
#endif

	//Γ_abc := GammaLLL.a.bc
	//Γ_abc = 1/2 (g_ab,c + g_ac,b - g_bc,a)
	real4x4s4 GammaLLL;
	for (int a = 0; a < stDim; ++a) {
		for (int b = 0; b < stDim; ++b) {
			for (int c = b; c < stDim; ++c) {
				int const bc = sym4[b][c];
				GammaLLL.s[a].s[bc] = .5 * (
					  partial_xU_of_gLL.s[c].s[sym4[a][b]]
					+ partial_xU_of_gLL.s[b].s[sym4[a][c]]
					- partial_xU_of_gLL.s[a].s[bc]
				);
			}
		}
	}

	//Γ^a_bc = GammaULL.a.bc
	//Γ^a_bc = g^ad Γ_dbc
	//real4s4 const gUU = calc_gUU_from_gPrim(gPrims[index]);
	real4s4 gUU = calc_gUU_from_gPrim(gPrims[index]);
#if 1
	GammaULLs[index] = real4s4_real4x4s4_mul(gUU, GammaLLL);
#else
	for (int a = 0; a < stDim; ++a) {
		for (int b = 0; b < stDim; ++b) {
			for (int c = b; c < stDim; ++c) {
				int const bc = sym4[b][c];
				real sum = 0;
				for (int d = 0; d < stDim; ++d) {
					sum += gUU.s[sym4[a][d]] * GammaLLL.s[d].s[bc];
				}
				GammaULLs[index].s[a].s[bc] = sum;
#if 0 //works
GammaULLs[index].s[a].s00 = gPrims[index].alpha;
GammaULLs[index].s[a].s01 = gPrims[index].betaU.s0;
GammaULLs[index].s[a].s02 = gPrims[index].betaU.s1;
GammaULLs[index].s[a].s03 = gPrims[index].betaU.s2;
GammaULLs[index].s[a].s11 = gPrims[index].gammaLL.s00;
GammaULLs[index].s[a].s12 = gPrims[index].gammaLL.s01;
GammaULLs[index].s[a].s13 = gPrims[index].gammaLL.s02;
GammaULLs[index].s[a].s22 = gPrims[index].gammaLL.s11;
GammaULLs[index].s[a].s23 = gPrims[index].gammaLL.s12;
GammaULLs[index].s[a].s33 = gPrims[index].gammaLL.s22;
#endif
//works
//GammaULLs[index].s[a] = real4s4(1,2,3,4,5,6,7,8,9,10);
// nans ...
//GammaULLs[index].s[a] = gLL_from_gPrims_at(env, gPrims, i - (int4)(1, 0, 0, 0));
// 
GammaULLs[index].s[a] = gLL_L.s1;	// {{0, 0, 0, 0, 0, 0, 0, 0, 0, 1}
//nans in the spatial derivatives
//GammaULLs[index].s[a].s[bc] = partial_xU_of_gLL.s[a].s[bc];
//nans
//GammaULLs[index].s[a].s[bc] = GammaLLL.s[a].s[bc];
//works:
//GammaULLs[index].s[a].s[bc] = gUU.s[bc];
// works:
//GammaULLs[index].s[a].s[bc] = a + b + c;
			}
		}
	}
#endif
}

/*
J_a = (rho, j_i)

flat space:

F_uv^,v = 4 pi J_u
F_uv = A_v,u - A_u,v
A_v,u^v - A_u,v^v = 4 pi J^u

use the gauge A_v,^v = 0

A_u,v^v = -4 pi J_u

curved space:
A_v;u^v - A_u;v^v + R^u_v A^v = 4 pi J^u

use gauge A^u_;u = 0

-A_u;v^v + R^u_v A^v = 4 pi J^u
A_a;u^u - R_a^u A_u = -4 pi J_a

to enforce the gauge, A^u_;u = 0
we need to subtract the potential gradient component of A
...or don't use the gauge :-p

D A_a = -J_a
A_a = -D^-1 J_a for some D...

what is D?

A_v;u^v - A_u;v^v + R_u^v A_v = 4 pi J_u
= g^vw (A_v;uw - A_u;vw + R_uv A_w) = 4 pi J_u
= g^vw (A_v;u;w - A_u;v;w + R_uv A_w) = 4 pi J_u
= g^vw (
	(A_v,u - Gamma^r_vu A_r)_;w
	- (A_u,v - Gamma^r_uv A_r)_;w
	+ R_uv A_w) = 4 pi J_u
= g^vw (
	(A_v,u - Gamma^r_vu A_r)_,w
	- (A_s,u - Gamma^r_su A_r) Gamma^s_vw
	- (A_v,s - Gamma^r_vs A_r) Gamma^s_uw
	- (A_u,v - Gamma^r_uv A_r)_,w
	+ (A_u,s - Gamma^r_us A_r) Gamma^s_vw
	+ (A_s,v - Gamma^r_sv A_r) Gamma^s_uw
	+ R_uv A_w) = 4 pi J_u
= g^vw (
	A_v,uw
	- A_u,vw
	- Gamma^s_vw A_s,u
	+ Gamma^s_uw A_s,v
	- Gamma^s_uw A_v,s
	+ Gamma^s_vw A_u,s
	+ R_uv A_w) = 4 pi J_u


or how about I enforce the A^u_;u = 0 constraint as well?

so every iteration that we converge J_a for -1/(4pi) (g^vw D_v D_w delta^u_a  - R_a^u) A_u = J_a
we also constrain A^u_;u = 0, which means divergence-free,
which means subtract out the potential (in curved space)
... how?
*/
<? if solver.useFourPotential then ?>
kernel void solveAL(
	constant env_t const * const env,
	global <?=TPrim_t?> * const TPrims
) {
	initKernel();

<?
--[[ TODO this is 2nd order, and the middle is missing, because it's an inverse to a discrete Laplacian solved with Jacobi iteration
=solver:finiteDifference{
	bufferName = "TPrims",
	getValue = function(args) return "TPrims["..args.index.."].JU" end,
	valueType = "real4",
}
--]]
?>

	real4 skewSum;
	for (int i = 0; i < sDim; ++i) {

		<?=TPrim_t?> TPrim_prev;
		if (i.s[i] > 0) {
			int4 iL = i;
			--iL.s[i];
			int const indexL = indexForInt4(iL);
			TPrim_prev = TPrims[indexL];
		} else {
			// boundary condition
			TPrim_prev = TPrims[index];
		}

		<?=TPrim_t?> TPrim_next;
		if (i.s[i] < size.s[i] - 1) {
			int4 iR = i;
			++iR.s[i];
			int indexR = indexForInt4(iR);
			TPrim_next = TPrims[indexR];
		} else {
			// boundary condition
			TPrim_next = TPrims[index];
		}

		skewSum += (TPrim_prev.JU + TPrim_next.JU) * (env->invdx.s[i] * env->invdx.s[i]);
	}

	real const diag = -2. * (0.
		+ 1. / (dx.s0 * dx.s0)
		+ 1. / (dx.s1 * dx.s1)
		+ 1. / (dx.s2 * dx.s2)
	);

	global <?=TPrim_t?> * const TPrim = TPrims + index;

	TPrim->AL = real4_sub(TPrim->AL, skewSum) / diag;
}
<? end ?>

//used by linearized solvers of G x = 8 pi T
// where G is the (non)linear function G_ab
// T is T_ab (which is also a function of x but don't tell)
// and x is gPrims
kernel void calc_EinsteinLLs(
	constant env_t const * const env,
	global real4s4 * const EinsteinLLs,
	global gPrim_t const * const gPrims,
	global real4x4s4 const * const GammaULLs
) {
	initKernel();
	EinsteinLLs[index] = calc_EinsteinLL(env, i, gPrims, GammaULLs);
}

kernel void calc_8piTLLs(
	constant env_t const * const env,
	global real4s4 * const _8piTLLs,
	global <?=TPrim_t?> const * const TPrims,
	global gPrim_t const * const gPrims
) {
	initKernel();
	_8piTLLs[index] = calc_8piTLL(
		calc_gLL_from_gPrim(gPrims[index]),
		TPrims[index]
	);
}

kernel void calc_EFEs(
	constant env_t const * const env,
	global real4s4 * const EFEs,
	global <?=TPrim_t?> const * const TPrims,
	global gPrim_t const * const gPrims,
	global real4x4s4 const * const GammaULLs
) {
	initKernel();
	<?=TPrim_t?> const TPrim = TPrims[index];
	real4s4 const gLL = calc_gLL_from_gPrim(gPrims[index]);
	real4s4 const EinsteinLL = calc_EinsteinLL(env, i, gPrims, GammaULLs);
	real4s4 const _8piTLL = calc_8piTLL(gLL, TPrim);
	// EFEs(x) = G_ab(x) - 8 π T_ab(x)
//debugging
	//EFEs[index] = real4s4();	//no nans
	//EFEs[index] = _8piTLL;	//no nans
	//EFEs[index] = EinsteinLL;	//no nans
	EFEs[index] -= _8piTLL;
	/* no nans
	for (int a = 0; a < stDim; ++a) {
		for (int b = a; b < stDim; ++b) {
			EFEs[index].s[sym4[a][b]] = EinsteinLL.s[sym4[a][b]] - _8piTLL.s[sym4[a][b]];
		}
	}
	*/
	/* another try ... works
	for (int ab = 0; ab < 10; ++ab) {
		EFEs[index].s[ab] = real_sub(EinsteinLL.s[ab], _8piTLL.s[ab]);
	}
	*/
}
