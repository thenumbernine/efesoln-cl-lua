#include "autogen.h"
#include "math.hpp"
#include "efe.h"

#if defined(CLCPU_ENABLED)
#define constant
#define global
#define local
#endif

// TODO maybe put the kernel in here
// then use this + efe.cl for the solver
// and use display + efe.cl for the display

// init

kernel void init_gPrims(
	constant env_t const * const env,
	global gPrim_t * const gPrims,
	int initCond
) {
	initKernel();
	real3 const x = getX(env, i);

	global gPrim_t * const gPrim = gPrims + index;

	if (0) {
<? for i,initCond in ipairs(solver.initConds) do
?>
	} else if (initCond == <?=i?>) {
		*gPrim = <?=initCond.code?>;
<? end
?>	} else {
		*gPrim = gPrim_t(
			-1,
			real3(-2, -3, -4),
			real3s3(
				-5, -6, -7,
				-8, -9,
				-10
			)
		);
	}
}

kernel void init_TPrims(
	constant env_t const * const env,
	global <?=TPrim_t?> * const TPrims
) {
	initKernel();

	<?=TPrim_t?> & TPrim = TPrims[index];

<? if solver.body.useMatter then ?>
	TPrim.rho = 0;
	TPrim.eInt = 0;
	TPrim.P = 0;
<? 	if solver.body.useVel then ?>
	TPrim.v = real3();
<? 	end
end
if solver.body.useEM then ?>
	TPrim.E = real3();
	TPrim.B = real3();
<? end ?>

<?=solver.body.init and solver.body.init or ''?>

<? if solver.useFourPotential then ?>
	TPrim.AL = -TPrim.JU;
<? end ?>
}

// compute buffers to compute EFE

#include <iostream>

kernel void calc_GammaULLs(
	constant env_t const * const env,
	global real4x4s4 * const GammaULLs,
	global gPrim_t const * const gPrims
) {
	initKernel();

	//partial_xU_of_gLL.c.ab := ∂/∂x^c(g_ab) = g_ab,c
<?=solver:finiteDifference{
	srcType = "4s4",
	resultName = "partial_xU_of_gLL",
	getValue = function(args) return "gLL_from_gPrims_at(env, gPrims, "..args.i..")" end,
	getBoundary = function(args) return "gLL_from_gPrims_at(env, gPrims, "..args.i..")" end,
}?>

	//Γ_abc := GammaLLL.a.bc
	//Γ_abc = 1/2 (g_ab,c + g_ac,b - g_bc,a)
	auto GammaLLL = real4x4s4([&](int a, int b, int c) {
		return .5 * (
			  partial_xU_of_gLL(c, a, b)
			+ partial_xU_of_gLL(b, a, c)
			- partial_xU_of_gLL(a, b, c)
		);
	});

	//GammaULL.a.bc := Γ^a_bc = g^ad Γ_dbc
	auto gUU = calc_gUU_from_gPrim(gPrims[index]);
	GammaULLs[index] = gUU * GammaLLL;
}

/*
J_a = (rho, j_i)

flat space:

F_uv^,v = 4 pi J_u
F_uv = A_v,u - A_u,v
A_v,u^v - A_u,v^v = 4 pi J^u

use the gauge A_v,^v = 0

A_u,v^v = -4 pi J_u

curved space:
A_v;u^v - A_u;v^v + R^u_v A^v = 4 pi J^u

use gauge A^u_;u = 0

-A_u;v^v + R^u_v A^v = 4 pi J^u
A_a;u^u - R_a^u A_u = -4 pi J_a

to enforce the gauge, A^u_;u = 0
we need to subtract the potential gradient component of A
...or don't use the gauge :-p

D A_a = -J_a
A_a = -D^-1 J_a for some D...

what is D?

A_v;u^v - A_u;v^v + R_u^v A_v = 4 pi J_u
= g^vw (A_v;uw - A_u;vw + R_uv A_w) = 4 pi J_u
= g^vw (A_v;u;w - A_u;v;w + R_uv A_w) = 4 pi J_u
= g^vw (
	(A_v,u - Gamma^r_vu A_r)_;w
	- (A_u,v - Gamma^r_uv A_r)_;w
	+ R_uv A_w) = 4 pi J_u
= g^vw (
	(A_v,u - Gamma^r_vu A_r)_,w
	- (A_s,u - Gamma^r_su A_r) Gamma^s_vw
	- (A_v,s - Gamma^r_vs A_r) Gamma^s_uw
	- (A_u,v - Gamma^r_uv A_r)_,w
	+ (A_u,s - Gamma^r_us A_r) Gamma^s_vw
	+ (A_s,v - Gamma^r_sv A_r) Gamma^s_uw
	+ R_uv A_w) = 4 pi J_u
= g^vw (
	A_v,uw
	- A_u,vw
	- Gamma^s_vw A_s,u
	+ Gamma^s_uw A_s,v
	- Gamma^s_uw A_v,s
	+ Gamma^s_vw A_u,s
	+ R_uv A_w) = 4 pi J_u


or how about I enforce the A^u_;u = 0 constraint as well?

so every iteration that we converge J_a for -1/(4pi) (g^vw D_v D_w delta^u_a  - R_a^u) A_u = J_a
we also constrain A^u_;u = 0, which means divergence-free,
which means subtract out the potential (in curved space)
... how?
*/
<? if solver.useFourPotential then ?>
kernel void solveAL(
	constant env_t const * const env,
	global <?=TPrim_t?> * const TPrims
) {
	initKernel();

<?
--[[ TODO this is 2nd order, and the middle is missing, because it's an inverse to a discrete Laplacian solved with Jacobi iteration
=solver:finiteDifference{
	bufferName = "TPrims",
	getValue = function(args) return "TPrims["..args.index.."].JU" end,
	valueType = "real4",
}
--]]
?>

	real4 skewSum;
	for (int i = 0; i < sDim; ++i) {

		<?=TPrim_t?> TPrim_prev;
		if (i(i) > 0) {
			int4 iL = i;
			--iL(i);
			int const indexL = indexForInt4(iL);
			TPrim_prev = TPrims[indexL];
		} else {
			// boundary condition
			TPrim_prev = TPrims[index];
		}

		<?=TPrim_t?> TPrim_next;
		if (i(i) < size(i) - 1) {
			int4 iR = i;
			++iR(i);
			int indexR = indexForInt4(iR);
			TPrim_next = TPrims[indexR];
		} else {
			// boundary condition
			TPrim_next = TPrims[index];
		}

		skewSum += (TPrim_prev.JU + TPrim_next.JU) * (env->invdx(i) * env->invdx(i));
	}

	real const diag = -2. * (
		  env->invdx(0) * env->invdx(0)
		+ env->invdx(1) * env->invdx(1)
		+ env->invdx(2) * env->invdx(2)
	);

	<?=TPrim_t?> & TPrim = TPrims[index];

	TPrim.AL = (TPrim.AL - skewSum) / diag;
}
<? end ?>

//used by linearized solvers of G x = 8 pi T
// where G is the (non)linear function G_ab
// T is T_ab (which is also a function of x but don't tell)
// and x is gPrims
kernel void calc_EinsteinLLs(
	constant env_t const * const env,
	global real4s4 * const EinsteinLLs,
	global gPrim_t const * const gPrims,
	global real4x4s4 const * const GammaULLs
) {
	initKernel();
	EinsteinLLs[index] = calc_EinsteinLL(env, i, gPrims, GammaULLs);
}

kernel void calc_8piTLLs(
	constant env_t const * const env,
	global real4s4 * const _8piTLLs,
	global <?=TPrim_t?> const * const TPrims,
	global gPrim_t const * const gPrims
) {
	initKernel();
	_8piTLLs[index] = calc_8piTLL(
		calc_gLL_from_gPrim(gPrims[index]),
		TPrims[index]
	);
}

kernel void calc_EFEs(
	constant env_t const * const env,
	global real4s4 * const EFEs,
	global <?=TPrim_t?> const * const TPrims,
	global gPrim_t const * const gPrims,
	global real4x4s4 const * const GammaULLs
) {
	initKernel();
	<?=TPrim_t?> const & TPrim = TPrims[index];
	real4s4 const gLL = calc_gLL_from_gPrim(gPrims[index]);
	real4s4 const EinsteinLL = calc_EinsteinLL(env, i, gPrims, GammaULLs);
	real4s4 const _8piTLL = calc_8piTLL(gLL, TPrim);
	// EFEs(x) = G_ab(x) - 8 π T_ab(x)
	EFEs[index] = EinsteinLL - _8piTLL;
}
