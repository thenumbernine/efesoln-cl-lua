#include "autogen.h"
#include "math.hpp"
#include "efe.h"

#if defined(CLCPU_ENABLED)
#define constant
#define global
#define local
#endif

constant real const c = 299792458;			// m/s
constant real const G = 6.67384e-11;		// m^3 / (kg s^2)

constant real const d1coeffs[] = {
	0,
<?
local d1coeffs = derivCoeffs[1][solver.diffOrder]
for i=1,#d1coeffs do
?>	<?=d1coeffs[i]?>,
<?
end
?>
};

real d1coeff_for_offset(int offset) {
	if (offset < 0) {
		return -real(offset) * d1coeffs[-offset];
	} else {
		return real(offset) * d1coeffs[offset];
	}
}

constant real const d2coeffs[] = {
<?
local d2coeffs = derivCoeffs[2][solver.diffOrder]
for i=0,#d2coeffs do
?>	<?=d2coeffs[i]?>,
<?
end
?>
};

// ok weird convention ...
// for spacetime vars, real3 is xyz, real4 is used such that .s0123 == txyz (time dimension first)
// but for opencl vars (i, etc), real4 is named xyzw (time dimension last)
// this is going to assume the former (spacetime vars)
real3 real4_to_real3(real4 const & a) {
	return real3(a(1), a(2), a(3));
}

real4 real3_to_real4(real3 const & a) {
	return real4(0, a(0), a(1), a(2));
}

real3 real4s4_i0(real4s4 const & a) {
	return real3(a(0, 1), a(0, 2), a(0, 3));
}

real3s3 real4s4_ij(real4s4 const & a) {
	return real3s3([&](int i, int j) { return a(i+1, j+1); });
}

constant real4s4 const real4s4_Minkowski = real4s4([](int a, int b) -> real {
	return (a == b) ? (a == 0 ? -1 : 1) : 0;
});


real3 real4x4s4_i00(real4x4s4 const & a) {
	return real3([&](int i) { return a(i+1, 0, 0); });
}

//b_i = a^j_ji
real4 real4x4s4_tr12(real4x4s4 const & a) {
	Tensor::Index<'i'> i;
	Tensor::Index<'j'> j;
	return a(j, j, i).assignI();
}

//b^i = a^ij_j
real4 real4x4x4_tr23(real4x4x4 const & a) {
	Tensor::Index<'i'> i;
	Tensor::Index<'j'> j;
	return a(i, j, j).assignI();
}

//c^ij_k = a^i_lk b^lj
real4x4x4 real4x4s4_real4s4_mul21(
	real4x4s4 const & a,
	real4s4 const & b
) {
	Tensor::Index<'i'> i;
	Tensor::Index<'j'> j;
	Tensor::Index<'k'> k;
	Tensor::Index<'l'> l;
	return (a(i, l, k) * b(l, j)).assign(i, j, k);
}

real4x4x4x4 real4x4x4x4_real4s4_mul_1_1(
	real4x4x4x4 const & a,
	real4s4 const & b
) {
	return b * a;
}

real4x4x4x4 real4x4x4x4_real4s4_mul_3_1(
	real4x4x4x4 const & a,
	real4s4 const & b
) {
	Tensor::Index<'i'> i;
	Tensor::Index<'j'> j;
	Tensor::Index<'k'> k;
	Tensor::Index<'l'> l;
	Tensor::Index<'m'> m;
	return (a(i, j, m, l) * b(m, k)).assign(i, j, k, l);
}

//b_ij = a^k_ikj
// assuming b_ij = b_ji i.e. a_ijkl = a_klij
real4s4 real4x4x4x4_tr13_to_real4s4(real4x4x4x4 const & a) {
	Tensor::Index<'i'> i;
	Tensor::Index<'j'> j;
	Tensor::Index<'k'> k;
	return a(k, i, k, j).assignR<real4s4>(i, j);
}

real3 getX(
	constant env_t const * const env,
	int4 const i
) {
	return real3(
		env->xmin.x + (real(i.x) + .5)/real(env->size.x) * (env->xmax.x - env->xmin.x),
		env->xmin.y + (real(i.y) + .5)/real(env->size.y) * (env->xmax.y - env->xmin.y),
		env->xmin.z + (real(i.z) + .5)/real(env->size.z) * (env->xmax.z - env->xmin.z)
	);
}

constant int4 const int4_dirs[3] = {
	(int4)(1, 0, 0, 0),
	(int4)(0, 1, 0, 0),
	(int4)(0, 0, 1, 0),
};
int4 int4_dir(int const dim, int const offset) {
	return int4_dirs[dim] * offset;
}

//put the boundary condition code in here, in one place
// this is hardcoded to g_ab = η_ab at boundaries
gPrim_t calc_gPrim_boundary(
	constant env_t const * const env,
	global gPrim_t const * const gPrims,
	int4 i
) {
	if (0) {
<? for i,boundaryCond in ipairs(solver.boundaryConds) do
?>	} else if (env->boundaryCond == <?=i?>) {
<?=boundaryCond.code?>
<? end
?>	} else {
		return gPrim_t(
			-1,
			{-2, -3, -4},
			{-5, -6, -7, -8, -9, -10}
		);
	}
}

real4s4 calc_gLL_from_gPrim(
	gPrim_t const & gPrim
) {
	real const alpha = gPrim.alpha;
	real3 const & betaU = gPrim.betaU;
	real3s3 const & gammaLL = gPrim.gammaLL;

	real const alphaSq = alpha * alpha;
	real3 const betaL = gammaLL * betaU;
	real const betaSq = betaL.dot(betaU);

	real4s4 gLL;
	gLL(0, 0) = -alphaSq + betaSq;
	for (int i = 0; i < sDim; ++i) {
		gLL(0, i+1) = betaL(i);
		for (int j = i; j < sDim; ++j) {
			gLL(i+1, j+1) = gammaLL(i, j);
		}
	}
	return gLL;
}

real4s4 calc_gUU_from_gPrim(
	gPrim_t const & gPrim
) {
	real const alpha = gPrim.alpha;
	real const invAlphaSq = 1. / (alpha * alpha);
	real3 const & betaU = gPrim.betaU;

	real3s3 const gammaLL = gPrim.gammaLL;
	real const det_gammaLL = gammaLL.determinant();
	real3s3 const gammaUU = gammaLL.inverse(det_gammaLL);

	real4s4 gUU;
	gUU(0, 0) = -invAlphaSq;
	//{-1, 1, 2, 2, 3, 4, 3, 4, 5, 6} <- writing g(0,i+1) = i+1; g(i+1,j+1) = i+j+2
	//{-1, 1, 0, 2, 0, 0, 3, 0, 0, 0} <- writing g(0,i+1) = i+1
	// so the mapping is ...
	//{00, 01, 11, 02, 12, 22, 03, 13, 23, 33}
	for (int i = 0; i < sDim; ++i) {
		gUU(0, i+1) = betaU(i) * invAlphaSq;
		for (int j = i; j < sDim; ++j) {
			gUU(i+1, j+1) = gammaUU(i, j) - betaU(i) * betaU(j) * invAlphaSq;
		}
	}
	return gUU;
}

real4s4 gLL_from_gPrims_at(
	constant env_t const * const env,
	global gPrim_t const * const gPrims,
	int4 const i
) {
	if (i.x < 0 || i.y < 0 || i.z < 0 ||
		i.x >= (int)env->size.x || i.y >= (int)env->size.y || i.z >= (int)env->size.z
	) {
		return calc_gLL_from_gPrim(calc_gPrim_boundary(env, gPrims, i));
	} else {
		return calc_gLL_from_gPrim(gPrims[indexForInt4(i)]);
	}
}

real4s4 gUU_from_gPrims_at(
	constant env_t const * const env,
	global gPrim_t const * const gPrims,
	int4 const i
) {
	if (i.x < 0 || i.y < 0 || i.z < 0 ||
		i.x >= (int)env->size.x || i.y >= (int)env->size.y || i.z >= (int)env->size.z
	) {
		return calc_gUU_from_gPrim(calc_gPrim_boundary(env, gPrims, i));
	} else {
		return calc_gUU_from_gPrim(gPrims[indexForInt4(i)]);
	}
}

real4s4 calc_RicciLL(
	constant env_t const * const env,
	int4 const i,
	global gPrim_t const * const gPrims,
	global real4x4s4 const * const GammaULLs
) {
	int const index = indexForInt4(i);

	//this Ricci calculation differs from the one in calc_partial_gLL_of_Phis because
	// that one can extract RiemannULLL, which can be used for RicciLL calcs
	// but this one doesn't need RiemannULLL, so we can contract one of the terms in RicciLL's calcs

	auto const & GammaULL = GammaULLs[index];

	auto const gLL = calc_gLL_from_gPrim(gPrims[index]);
	auto const gUU = calc_gUU_from_gPrim(gPrims[index]);

	//GammaUUL.a.b.c := Γ^ab_c = Γ^a_dc g^db
	auto const GammaUUL = real4x4s4_real4s4_mul21(GammaULL, gUU);

	//GammaLLL.a.bc := Γ_abc = g_ad Γ^d_bc
	auto const GammaLLL = gLL * GammaULL;

	//Gamma23U.a := Γ^a = Γ^au_u
	auto const Gamma23U = real4x4x4_tr23(GammaUUL);

	//partial_xU2_of_gLL.ab.cd := ∂_a ∂_b (g_cd)
	// = ∂^2/(∂x^a ∂x^b) (g_cd)
	// = g_cd,ab
<?=solver:finiteDifference2{
	srcType = "4s4",
	resultName = "partial_xU2_of_gLL",
	getValue = function(args) return "gLL_from_gPrims_at(env, gPrims, "..args.i..")" end,
	getBoundary = function(args) return "gLL_from_gPrims_at(env, gPrims, "..args.i..")" end,
}?>

<? if false then -- testing to make sure contraction of Riemann == Ricci
-- ... looks the same as the simplified version below ?>

	//partial_xU2_of_gLL_asym.a.b.c.d := g_ad,bc - g_bd,ac - g_ac,bd + g_bc,ad
	// TODO antisymmetric storage
	//both are T_abcd = -T_bacd = -T_abdc and T_abcd = T_cdab
	auto const partial_xU2_of_gLL_asym = real4x4x4x4([&](int a, int b, int c, int d) {
		return partial_xU2_of_gLL(a, d, b, c)
			+ partial_xU2_of_gLL(b, c, a, d)
			- partial_xU2_of_gLL(b, d, a, c)
			- partial_xU2_of_gLL(a, c, b, d);
	});

	//GammaSq_asym_LLLL.a.b.c.d := Γ^e_ad Γ_ebc - Γ^e_ac Γ_ebd
	// TODO antisymmetric storage
	auto const GammaSq_asym_LLLL = real4x4x4x4([&](int a, int b, int c, int d) {
		real sum = 0.;
		for (int e = 0; e < stDim; ++e) {
			sum += GammaULL(e, a, d) * GammaLLL(e, b, c)
				- GammaULL(e, a, c) * GammaLLL(e, b, d);
		}
		return sum;
	});

	auto const gUU_times_partial_xU2_gLL_asym = real4x4x4x4_real4s4_mul_1_1(partial_xU2_of_gLL_asym, gUU);
	auto const GammaSq_asym_ULLL = real4x4x4x4_real4s4_mul_1_1(GammaSq_asym_LLLL, gUU);

	//RiemannULLL.a.b.cd := R^a_bcd = 1/2 g^ae ((g_ed,cb - g_bd,ce - g_ec,bd + g_bc,de) + g^fg (Γ_fed Γ_gbc - Γ_fec Γ_gbd))
	//TODO antisymmetric storage
	auto const RiemannULLL = GammaSq_asym_ULLL + .5 * gUU_times_partial_xU2_gLL_asym;

	//RicciLL.ab := R_ab = R^c_acb
	auto const RicciLL = real4x4x4x4_tr13_to_real4s4(RiemannULLL);

<? else  -- testing to make sure contraction of Riemann == Ricci ?>

	/*
	R_abcd = 1/2 (g_ad,cb - g_bd,ca - g_ac,bd + g_bc,da) + g^fg (Γ_fad Γ_gbc - Γ_fac Γ_gbd)
	R^a_bcd = g^ae (1/2 (g_ed,cb - g_bd,ce - g_ec,bd + g_bc,de) + g^fg (Γ_fed Γ_gbc - Γ_fec Γ_gbd))
	RicciLL.ab := R_ab = 1/2 g^uv (g_au,bv + g_bv,au - g_ab,uv - g_uv,ab) + Γ^uv_a Γ_uvb - Γ^uv_v Γ_uab
	*/
	auto const RicciLL = real4s4([&](int a, int b) {
		real sum = 0;
		for (int u = 0; u < stDim; ++u) {
			for (int v = 0; v < stDim; ++v) {
				sum += .5 * gUU(u, v) * (
					  partial_xU2_of_gLL(a, u, b, v)
					+ partial_xU2_of_gLL(b, v, a, u)
					- partial_xU2_of_gLL(a, b, u, v)
					- partial_xU2_of_gLL(u, v, a, b)
				)
				+ GammaUUL(u, v, a) * GammaLLL(u, b, v);
			}
			sum -= Gamma23U(u) * GammaLLL(u, a, b);
		}
		return sum;
	});

<? end  -- testing to make sure contraction of Riemann == Ricci ?>

	return RicciLL;
}

//[1/m^2]
real4s4 calc_EinsteinLL(
	constant env_t const * const env,
	int4 const i,
	global gPrim_t const * const gPrims,
	global real4x4s4 const * const GammaULLs
) {
	int const index = indexForInt4(i);

	auto const & gPrim = gPrims[index];

	//gLL.ab := g_ab
	auto gLL = calc_gLL_from_gPrim(gPrim);

	//gUU.ab := g_ab
	auto gUU = calc_gUU_from_gPrim(gPrim);

	//RicciLL.ab := R_ab
	auto const RicciLL = calc_RicciLL(env, i, gPrims, GammaULLs);

	//Gaussian := R = R_ab g^ab
	auto const Gaussian = RicciLL.dot(gUU);

	//G_uv = R_uv - 1/2 g_uv R
	return RicciLL - (.5 * Gaussian) * gLL;
}

//[1/m^2]
real4s4 calc_8piTLL(
	real4s4 const gLL,
	<?=TPrim_t?> const TPrim
) {
	real4s4 _8piTLL;

<?
if solver.body.useEM then
?>

	/*
	assume the E and B fields are upper 3-vectors
	T_ab = F_au F_b^u - 1/4 g_ab F_uv F^uv
	*/

	real4 const EU = real3_to_real4(TPrim.E);
	real4 const EL = gLL * EU;
	real const ESq = EL.dot(EU);

	real4 const BU = real3_to_real4(TPrim.B);
	real4 const BL = gLL * BU;
	real const BSq = BL.dot(BU);

	real const sqrt_det_g = sqrt(fabs(gLL.determinant()));
	real3 const SL = TPrim.E.cross(TPrim.B) * sqrt_det_g;

	_8piTLL(0, 0) += ESq + BSq;
	for (int i = 0; i < sDim; ++i) {
		_8piTLL(0, i+1) += -2. * SL(i);
		for (int j = i; j < sDim; ++j) {
			_8piTLL(i+1, j+1) += gLL(i+1, j+1) * (ESq + BSq)
				- 2. * (EL(i+1) * EL(j+1) + BL(i+1) * BL(j+1));
		}
	}
<?
end
if solver.body.useMatter then
	if solver.body.useVel then
?>	//if we're using velocity ...
	//set vU.t = 0 so we only lower by the spatial component of the metric.  right?
	real4 const vU = real3_to_real4(TPrim.v);
	real4 const vL = gLL * vU;
	real const vLenSq = vL.dot(vU);	//vU.t = 0 so we'll neglect the vL.t component
	real const W = 1. / sqrt(1. - sqrt(vLenSq));
	real4 const uU = real4(W, W * vU(1), W * vU(2), W * vU(3));
	real4 const uL = gLL * uU;
	<? else ?>//otherwise uL = gLL(0)
	real4 const uL = gLL(0);
<?
	end
?>

	//8 π T_matter_ab = 8 π (u_a u_b (ρ (1 + eInt) + P) + g_ab P)
	//[1/m^2]
	real4s4 const _8piT_matter_LL = (8. * M_PI) * (
		uL.outer(uL) * (TPrim.rho * (1. + TPrim.eInt) + TPrim.P)
		+ gLL * TPrim.P
	);
	_8piTLL += _8piT_matter_LL;
<? end ?>

	return _8piTLL;
}

// different initial conditions / boundary conditions of gPrims
// this is the only code that uses solver.body

gPrim_t calc_gPrim_flat() {
	return gPrim_t(
		1,
		real3(),
		real3i3(1)
	);
}

gPrim_t calc_gPrim_stellar_Schwarzschild(real3 const x) {
	gPrim_t gPrim = calc_gPrim_flat();

	real const r = x.length();
	real const radius = <?=solver.body.radius?>;
	real const mass = <?=solver.body.mass?>;
	real const density = <?=solver.body.density?>;

	real const matterRadius = real(min(r, radius));
	real const volumeOfMatterRadius = 4./3.*M_PI*matterRadius*matterRadius*matterRadius;
	real const m = density * volumeOfMatterRadius;	// m^3

	/*
	g_ti = beta_i = 0
	g_tt = -alpha^2 + beta^2 = -alpha^2 = -1 + Rs/r <=> alpha = sqrt(1 - Rs/r)
	g_ij = gamma_ij = delta_ij + x^i x^j / r^2 2M/(r - 2M)		<- but x is upper, and you can't lower it without specifying gamma_ij
	 ... which might be why the contravariant spatial metrics of spherical and cartesian look so similar
	*/
	/*
	I'm going by MTW box 23.2 eqn 6 d/dt (proper time) = sqrt(1 - R/r) for r > R
		and ( 3/2 sqrt(1 - 2 M / R) - 1/2 sqrt(1 - 2 M r^2 / R^3) ) for r < R
		for M = total mass
		and R = planet radius
	*/
	gPrim.alpha = r > radius
		? sqrt(1 - 2*mass/r)
		: (1.5 * sqrt(1 - 2*mass/radius) - .5 * sqrt(1 - 2*mass*r*r/(radius*radius*radius)));

	gPrim.betaU = {};
	gPrim.gammaLL = real3i3(1) + x.outer(x) / (r * r) * 2 * m / (r - 2 * m);


	/*
	dr^2's coefficient
	spherical: 1/(1 - 2M/r) = 1/((r - 2M)/r) = r/(r - 2M)
	spherical contravariant: 1 - 2M/r
	cartesian contravariant: delta_ij - x/r y/r 2M/r
	hmm, contravariant terms of cartesian vs spherical look more similar than covariant terms do

	in the OV metric, dr^2's coefficient is exp(2 Lambda) = 1/(1 - 2 m(r) / r) where m(r) is the enclosing mass
	so the contravariant coefficient would be exp(-2 Lambda) = 1 - 2 m(r) / r
	I'm going to do the lazy thing and guess this converts to delta^ij - 2 m(r) x^i x^j / r^3
	*/

#if 0	//rotating about a distance
	/*
	now if we are going to rotate this
	at a distance of L and at an angular frequency of omega
	(not considering relativistic Thomas precession just yet)

	this might be a mess, but I'm (1) calculating the change in time as if I were in a frame rotating by L exp(i omega t)
	then (2) re-centering the frame at L exp(i omega t) ... so I can use the original coordinate system
	*/
	real const dr_alpha = r > radius
		? (mass / (r * r * sqrt(1. - 2. * mass / r)))
		: (mass * r / (radius * radius * radius * sqrt(1. - 2. * mass * r * r / (radius * radius * radius))));
	real const dr_m = r > radius ? 0 : (4. * M_PI * r * r * density);
	MetricPrims & dt_metricPrims = dt_metricPrimGrid(index);
	real const L = 149.6e+9;	//distance from earth to sun, in m
	//real omega = 0; //no rotation
	//real omega = 2. * M_PI / (60. * 60. * 24. * 365.25) / c;	//one revolution per year in m^-1
	//real omega = 1;	//angular velocity of the speed of light
	real const omega = c;	//I'm trying to find a difference ...
	real const t = 0;	//where the position should be.  t=0 means the body is moved by [L, 0], and its derivatives are along [0, L omega]
	Vector<real,2> dt_xHat(L * omega * sin(omega * t), -L * omega * cos(omega * t));
	dt_metricPrims.alpha = dr_alpha * (xi(0)/r * dt_xHat(0) + xi(1)/r * dt_xHat(1));
	for (int i = 0; i < sDim; ++i) {
		dt_metricPrims.betaU(i) = 0;
	}
	for (int i = 0; i < sDim; ++i) {
		for (int j = 0; j < sDim; ++j) {
			real sum = 0;
			for (int k = 0; k < 2; ++k) {
				//gamma_ij = f/g
				//so d/dxHat^k gamma_ij =
				real dxHat_k_of_gamma_ij =
				// f' / g
				(
					((i==k)*xi(j) + xi(i)*(j==k)) * 2.*m + xi(i)*xi(j) * 2.*dr_m * xi(k)/r
				) / (r * r * (r - 2 * m))
				// - f g' / g^2
				- (xi(i) * xi(j) * 2 * m) * ( (xi(k) - 2 * dr_m * xi(k)) * r + 2 * xi(k) * (r - 2 * m) )
				/ (r * r * r * r * (r - 2 * m) * (r - 2 * m));
				sum += dxHat_k_of_gamma_ij * dt_xHat(k);
			}
			dt_metricPrims.gammaLL(i,j) = sum;
		}
	}
#endif

#if 0	//work that beta
	/*
	so if we can get the gamma^ij beta_j,t components to equal the Gamma^t_tt components ...
	 voila, gravity goes away.
	I'm approximating this as beta^i_,t ... but it really is beta^j_,t gamma_ij + beta^j gamma_ij,t
	 ... which is the same as what I've got, but I'm setting gamma_ij,t to zero
	*/
	//expanding ...
	MetricPrims& dt_metricPrims = dt_metricPrimGrid(index);
	TensorLsub betaL;
	for (int i = 0; i < sDim; ++i) {
		//negate all gravity by throttling the change in space/time coupling of the metric
		real dm_dr = 0;
		betaL(i) = -(2*m * (r - 2*m) + 2 * dm_dr * r * (2*m - r)) / (2 * r * r * r) * xi(i)/r;
	}
	TensorSUsub gammaUU = inverse(metricPrims.gammaLL);
	for (int i = 0; i < sDim; ++i) {
		real sum = 0;
		for (int j = 0; j < sDim; ++j) {
			sum += gammaUU(i,j) * betaL(j);
		}
		dt_metricPrims.betaU(i) = sum;
	}
#endif

	return gPrim;
}

gPrim_t calc_gPrim_stellar_Kerr_Newman(real3 const x) {
	gPrim_t gPrim = calc_gPrim_flat();

	real const radius = <?=solver.body.radius?>;
	real const mass = <?=solver.body.mass?>;
	real const density = <?=solver.body.density?>;

	real const angularVelocity = 2. * M_PI / (60. * 60. * 24.) / c;	//angular velocity, in m^-1
	real const inertia = 2. / 5. * mass * radius * radius;	//moment of inertia about a sphere, in m^3
	real const angularMomentum = inertia * angularVelocity;	//angular momentum in m^2
	real const a = angularMomentum / mass;	//m

	//real r is the solution of (x*x + y*y) / (r*r + a*a) + z*z / (r*r) = 1
	// r^4 - (x^2 + y^2 + z^2 - a^2) r^2 - a^2 z^2 = 0
	real const RSq_minus_aSq = x.lenSq() - a*a;
	//so we have two solutions ... which do we use?
	//from gnuplot it looks like the two of these are the same ...
	real const r = sqrt((RSq_minus_aSq + sqrt(RSq_minus_aSq * RSq_minus_aSq + 4.*a*a*x.z*x.z)) / 2.);	//use the positive root

	//should I use the Kerr-Schild 'r' coordinate?
	//well, if 'm' is the mass enclosed within the coordinate
	// and that determines 'a', the angular momentum per mass within the coordinate (should it?)
	// then we would have a circular definition
	//real R = x.length();
	real const matterRadius = min(r, radius);
	real const volumeOfMatterRadius = 4./3.*M_PI*matterRadius*matterRadius*matterRadius;
	real const m = density * volumeOfMatterRadius;	// m^3

	real const Q = 0;	//charge
	real const H = (r*m - Q*Q/2.)/(r*r + a*a*x.z*x.z/(r*r));

	//3.4.33 through 3.4.35 of Alcubierre "Introduction to 3+1 Numerical Relativity"

	/*TODO fix this for the metric within the star
	 in other news, this is an unsolved problem!
	https://arxiv.org/pdf/1503.02172.pdf section 3.11
	https://arxiv.org/pdf/1410.2130.pdf section 4.2 last paragraph
	*/
	//metricPrims.alpha = 1./sqrt(1. + 2*H);
	gPrim.alpha = sqrt(1. - 2*H/(1+2*H) );

	auto const l = real3(
		(r*x.x + a*x.y)/(r*r + a*a),
		(r*x.y - a*x.x)/(r*r + a*a),
		x.z/r
	);

	gPrim.betaU = 2. * H * l / (1. + 2. * H);
	gPrim.gammaLL = real3i3(1) + 2. * H * l.outer(l);
	return gPrim;
}

// gradient descent , but I'm moving everything into this file so the display shader can see it...

real4s4x4s4 calc_partial_gLL_of_8piTLL(
	<?=TPrim_t?> const & TPrim,
	real4s4 const & gLL,
	real4s4 const & gUU
) {
	real4s4x4s4 partial_gLL_of_8piTLL;
<?
if solver.body.useEM then ?>
	auto const EU = real3_to_real4(TPrim.E);
	auto const EL = gLL * EU;
	real const ESq = EL.dot(EU);

	auto const BU = real3_to_real4(TPrim.B);
	auto const BL = gLL * BU;
	real const BSq = BL.dot(BU);

	real const sqrt_det_g = sqrt(fabs(gLL.determinant()));
	auto const SL = TPrim.E.cross(TPrim.B) * sqrt_det_g;
	
	// TODO sub-tensor indexes ...
	for (int e = 0; e < stDim; ++e) {
		for (int f = e; f < stDim; ++f) {
			if (e > 0 && f > 0) {
				partial_gLL_of_8piTLL(e, f, 0, 0) += TPrim.E(e-1) * TPrim.E(f-1) + TPrim.B(e-1) * TPrim.B(f-1);
			}
			for (int i = 0; i < sDim; ++i) {
				partial_gLL_of_8piTLL(e, f, 0, i+1) -= SL(i) * gUU(e, f);
				for (int j = i; j < sDim; ++j) {

					real sum = 0;
					if (e == i+1 && f == j+1) sum += ESq + BSq;

					if (e > 0 && f > 0) {
						sum += gLL(i+1, j+1) * (TPrim.E(e-1) * TPrim.E(f-1) + TPrim.B(e-1) * TPrim.B(f-1));
					}
					if (e == i+1) {
						sum -= 2. * (EU(f) * EL(j+1) + BU(f) * BL(j+1));
					}
					if (e == j+1) {
						sum -= 2. * (EU(f) * EL(i+1) + BU(f) * BL(i+1));
					}

					partial_gLL_of_8piTLL(e, f, i+1, j+1) += sum;
				}
			}
		}
	}
<?
end

if solver.body.useMatter then
	if solver.body.useVel then -- if we're using velocity ...
?>
	//set vU.t = 0 so we only lower by the spatial component of the metric.  right?
	auto const vU = real3_to_real4(TPrim.v);
	auto const vL = gLL * vU;
	auto const vLenSq = vL.dot(vU);	//vU.t = 0 so we'll neglect the vL.t component
	real const W = 1. / sqrt(1. - sqrt(vLenSq));
	auto const uU = real4(W, W * vU(1), W * vU(2), W * vU(3));
	auto const uL = gLL * uU;
<?
	else -- otherwise uL = gLL(0)
?>
	real4 const uL = gLL(0);
<?
	end
?>

	Tensor::Index<'e'> e;
	Tensor::Index<'f'> f;
	Tensor::Index<'a'> a;
	Tensor::Index<'b'> b;
	real4i4 const delta(1);
	partial_gLL_of_8piTLL += (
		(
			delta(e, a) * uL(b) + delta(e, b) * uL(a)
		) * uL(f) * (TPrim.rho * (1. + TPrim.eInt) + TPrim.P)
		+ delta(e, a) * delta(f, b) * TPrim.P
	).assignR<real4s4x4s4>(e, f, a, b);
<?
end
?>
	return (8. * M_PI) * partial_gLL_of_8piTLL;
}

real4s4 EFE_LL_minus_half_trace_at(
	constant env_t const * const env,
	global gPrim_t const * const gPrims,
	global real4s4 const * const EFEs,
	int4 const i
) {
	if (i.x < 0 || i.y < 0 || i.z < 0 ||
		i.x >= (int)env->size.x || i.y >= (int)env->size.y || i.z >= (int)env->size.z
	) {
		return real4s4();	//TODO ... consider boundary conditions
	}

	int const index = indexForInt4(i);
	auto const gLL = calc_gLL_from_gPrim(gPrims[index]);	// g_ab
	auto const gUU = calc_gUU_from_gPrim(gPrims[index]);	// g^ab
	auto const & EFE = EFEs[index];	// G_ab - 8 π T_ab

	//lower times lower, but used for minimizing frobenius norm of EFE_ab
	// Sum_ab (G_ab - 8 π T_ab) g_ab
	auto const EFE_LL_dot_gLL = EFE.dot(gLL);

	// common term in the gradient descent:
	// (G_uv - 8 π T_uv) - 1/2 (G_ab - 8 π T_ab) g_ab g^uv
	return EFE - (.5 * EFE_LL_dot_gLL) * gUU;
}

//GammaULL.a.b.c := Γ^a_bc
real4x4s4 GammaULL_at(
	constant env_t const * const env,
	int4 const i,
	global real4x4s4 const * const GammaULLs
) {
	if (i.x < 0 || i.y < 0 || i.z < 0 ||
		i.x >= (int)env->size.x || i.y >= (int)env->size.y || i.z >= (int)env->size.z
	) {
		return real4x4s4();
	}

	int const index = indexForInt4(i);
	return GammaULLs[index];
}

//GammaUUL.a.b.c := Γ^ab_c = Γ^a_dc g^db
real4x4x4 GammaUUL_at(
	constant env_t const * const env,
	int4 const i,
	global gPrim_t const * const gPrims,
	global real4x4s4 const * const GammaULLs
) {
	if (i.x < 0 || i.y < 0 || i.z < 0 ||
		i.x >= (int)env->size.x || i.y >= (int)env->size.y || i.z >= (int)env->size.z
	) {
		return real4x4x4();
	}
	int const index = indexForInt4(i);
	auto const gUU = calc_gUU_from_gPrim(gPrims[index]);
	return real4x4s4_real4s4_mul21(GammaULLs[index], gUU);
}

real4s4 calc_partial_gLL_of_Phi(
	constant env_t const * const env,
	global <?=TPrim_t?> const * const TPrims,
	global gPrim_t const * const gPrims,
	global real4x4s4 const * const GammaULLs,
	global real4s4 const * const EFEs,
	int4 const i
) {
	int const index = indexForInt4(i);

	auto const gLL = calc_gLL_from_gPrim(gPrims[index]);
	auto const gUU = calc_gUU_from_gPrim(gPrims[index]);
	auto const & GammaULL = GammaULLs[index];

	//partial_xU2_of_gLL.cd.ab := g_ab,cd
<?=solver:finiteDifference2{
	srcType = "4s4",
	resultName = "partial_xU2_of_gLL",
	getValue = function(args) return "gLL_from_gPrims_at(env, gPrims, "..args.i..")" end,
	getBoundary = function(args) return "gLL_from_gPrims_at(env, gPrims, "..args.i..")" end,
}?>

	//TODO or store this?
	//GammaLLL.a.bc := Γ_abc = g_au Γ^u_bc
	auto const GammaLLL = gLL * GammaULL;

	//partial_xU2_of_gLL_asym.a.b.c.d := g_ad,bc - g_bd,ac - g_ac,bd + g_bc,ad
	// TODO antisymmetric storage
	//both are T_abcd = -T_bacd = -T_abdc and T_abcd = T_cdab
#if 0
	Tensor::Index<'a'> a;
	Tensor::Index<'b'> b;
	Tensor::Index<'c'> c;
	Tensor::Index<'d'> d;
	Tensor::Index<'e'> e;
	auto const partial_xU2_of_gLL_asym = (
		  partial_xU2_of_gLL(a, d, b, c)
		+ partial_xU2_of_gLL(b, c, a, d)
		- partial_xU2_of_gLL(b, d, a, c)
		- partial_xU2_of_gLL(a, c, b, d)
	).template assign(a,b,c,d);
#endif
#if 1
	auto const partial_xU2_of_gLL_asym = real4x4x4x4([&](int a, int b, int c, int d) {
		return partial_xU2_of_gLL(a, d, b, c)
			+ partial_xU2_of_gLL(b, c, a, d)
			- partial_xU2_of_gLL(b, d, a, c)
			- partial_xU2_of_gLL(a, c, b, d);
	});
#endif

	//GammaSq_asym_LLLL.a.b.c.d := Γ^e_ad Γ_ebc - Γ^e_ac Γ_ebd
	// not the same as the popular 2 Γ^a_e[c Γ^e_d]b used for Riemann with 2 ∂/dx^[c Γ^a_d]b
	// instead this is the one used with 2 g_[a[b,c]d]
	// TODO antisymmetric storage
	auto const GammaSq_asym_LLLL = real4x4x4x4([&](int a, int b, int c, int d) {
		real sum = 0.;
		for (int e = 0; e < stDim; ++e) {
			sum += GammaULL(e, a, d) * GammaLLL(e, b, c)
				- GammaULL(e, a, c) * GammaLLL(e, b, d);
		}
		return sum;
	});

	// linear transform, not necessarily tensoral (since neither is anyways)
	auto const gUU_times_partial_xU2_gLL_asym = real4x4x4x4_real4s4_mul_1_1(partial_xU2_of_gLL_asym, gUU);
	auto const GammaSq_asym_ULLL = real4x4x4x4_real4s4_mul_1_1(GammaSq_asym_LLLL, gUU);

	//RiemannLLLL.a.b.c.d := R_abcd
	//= 1/2 (g_ad,bc - g_bd,ac - g_ac,bd + g_bc,ad) + g^fg (Γ_fad Γ_gbc - Γ_fac Γ_gbd)
	//= 1/2 (g_ad,bc - g_bd,ac - g_ac,bd + g_bc,ad) + Γ^e_ad Γ_ebc - Γ^e_ac Γ_ebd
	// TODO antisymmetric storage
	// but this requires inserting -1's for reading/writing ...

	//RiemannULLL.a.b.c.d := R^a_bcd = 1/2 g^ae ((g_ed,cb - g_bd,ce - g_ec,bd + g_bc,de) + g^fg (Γ_fed Γ_gbc - Γ_fec Γ_gbd))
	//TODO antisymmetric storage
	auto const RiemannULLL = GammaSq_asym_ULLL + .5 * gUU_times_partial_xU2_gLL_asym;

	//RiemannULUL.a.b.c.d = R^a_b^c_d = R^a_bud g^uc
	auto const RiemannULUL = real4x4x4x4_real4s4_mul_3_1(RiemannULLL, gUU);

	//RicciLL.ab := R_ab = R^c_acb
	auto const RicciLL = real4x4x4x4_tr13_to_real4s4(RiemannULLL);

	//RicciUL.a.b := R^a_b = g^ac R_cb
	auto const RicciUL = gUU * RicciLL;

	//RicciUU.ab := R^ab = R^a_c g^cb
	auto const RicciUU = RicciUL * gUU;

	//Gaussian := R = R^a_a
	auto const Gaussian = RicciUL.trace();

	auto const partial_gLL_of_8piTLL = calc_partial_gLL_of_8piTLL(TPrims[index], gLL, gUU);

	auto const & EFE = EFEs[index];	// G_ab - 8 π T_ab

	//lower times lower, but used for minimizing frobenius norm of EFE_ab
	// Sum_ab (G_ab - 8 π T_ab) g_ab
	auto const EFE_LL_dot_gLL = EFE.dot(gLL);

	// common term in the gradient descent:
	// (G_uv - 8 π T_uv) - 1/2 (G_ab - 8 π T_ab) g_ab g^uv
	auto const EFE_LL_minus_half_trace = EFE - (.5 * EFE_LL_dot_gLL) * gUU;

	//GammaUUL.a.b.c := Γ^ab_c = Γ^a_dc g^db
	auto const GammaUUL = real4x4s4_real4s4_mul21(GammaULL, gUU);

	//Gamma23U.a := Γ^a = Γ^au_u
	auto const Gamma23U = real4x4x4_tr23(GammaUUL);

	// GammaSq_tr_2_2.pq.uv := Γ^pc_v Γ^q_cu - Γ^pc_c Γ^q_uv
	// symmetries?
	auto const GammaSq_tr_2_2 = real4x4x4x4([&](int p, int q, int u, int v) {
		real sum = - Gamma23U(p) * GammaULL(q, u, v);
		for (int c = 0; c < stDim; ++c) {
			sum += GammaUUL(p, c, v) * GammaULL(q, c, u);
		}
		return sum;
	});

	//partial_gLL_of_Phi.pq := ∂Φ/∂g_pq
	real4s4 partial_gLL_of_Phi;
	// first calculate non-partial non ∂/∂g_pq terms:
	for (int p = 0; p < stDim; ++p) {
		for (int q = p; q < stDim; ++q) {
			real sum = 0;
// this alone, converge line-search step size of 1e+30, will give a profile of the stress-energy density 
#if 1
			// -1/2 (G_pq - 8 π T_pq) R
			sum -= .5 * EFE(p, q) * Gaussian;
#endif
// the rest of these ... meh, same shape, I see no difference really
#if 1
			// + 1/2 Sum_ab EFE_ab g_ab R^pq
			// ... = 1/2 Sum_ab EFE_ab g_ab g^uv R^p_u^q_v
			sum += .5 * EFE_LL_dot_gLL * RicciUU(p, q);
#endif
#if 1
			// - Sum_ab EFE_ab 8 π ∂T_ab/∂g_pq
			for (int a = 0; a < stDim; ++a) {
				for (int b = 0; b < stDim; ++b) {
					sum -= EFE(a, b) * partial_gLL_of_8piTLL(p, q, a, b);
				}
			}
#endif
#if 1
			for (int u = 0; u < stDim; ++u) {
				for (int v = 0; v < stDim; ++v) {
					sum -= EFE_LL_minus_half_trace(u, v) * (
					// - (EFE_uv - 1/2 EFE_ab g_ab g^uv) R^p_u^q_v
						RiemannULUL(p, u, q, v)
					// - (EFE_uv - 1/2 EFE_ab g_ab g^uv) (Γ^pc_v Γ^q_cu - Γ^pc_c Γ^q_uv)
						+ GammaSq_tr_2_2(p, q, u, v)
					);
				}
			}
#endif
// these, in theory, could improve relation of convergence between values and their neighbors ..
// ... but it makes it go way too slow ...
#if 0
			// next calculate first-derivatives of ∂/∂g_pq terms:
			for (int dim = 0; dim < sDim; ++dim) {
				for (int offset = -<?=solver.diffOrder/2?>; offset <= <?=solver.diffOrder/2?>; ++offset) {
					if (offset == 0) continue;
					int4 const iofs = i + int4_dir(dim, offset);
					// + (EFE_uv - 1/2 EFE_ab g_ab g^uv) g^cd (δ^f_c δ^g_v Γ^e_ud + δ^f_u δ^g_d Γ^e_cv - δ^f_c δ^g_d Γ^e_uv - δ6f_u δ^g_v Γ^e_cd) 1/2 (∂/∂g_pq(x') (D_g[g_ef] + D_f[g_eg] - D_e[g_fg]) = δ^p_e δ^q_f d1coeff_g + δ^p_e δ^q_g d1coeff_f - δ^p_f δ^q_g d1coeff_e)
					// ... expanding all 12 terms with symmath and simplifying...
					/*
					asking symmath to simplify this for me:
					let H^uv = (G_ab - 8 π T_ab) (δ^u_a δ^v_b - 1/2 g_ab g^uv) = EFE_uv - 1/2 EFE_ab g_ab g^uv
						> delta = Tensor.deltaSymbol()
						> g = Tensor.metricSymbol()
						> (H'^uv' * g'^cd' * (delta'^f_c' * delta'^g_v' * Gamma'^e_ud' + delta'^f_u' * delta'^g_d' * Gamma'^e_cv' - delta'^f_c' * delta'^g_d' * Gamma'^e_uv' - delta'^f_u' * delta'^g_v' * Gamma'^e_cd') * (delta'^p_e' * delta'^q_f' * phi'_g' + delta'^p_e' * delta'^q_g' * phi'_f' - delta'^p_f' * delta'^q_g' * phi'_e'))
							:simplifyMetrics()
							:symmetrizeIndexes(H, {1,2})()
							:symmetrizeIndexes(Gamma, {2,3})()
							:symmetrizeIndexes(g, {1,2})()
							:tidyIndexes()()
							:symmetrizeIndexes(H, {1,2})()
							:favorTensorVariance(phi'_a')()
					...gives...
							  φ_a * H^pq * Γ^ab_b
						-     φ_a * H^pb * Γ^aq_b
						-     φ_a * H^bq * Γ^ap_b
						+     φ_a * H^bc * Γ^a_bc * g^pq
						- 2 * φ_a * H^aq * Γ^pb_b
						+ 2 * φ_a * H^ab * Γ^pq_b
						+ 2 * φ_a * H^bq * Γ^pa_b
						- 2 * φ_a * H^bc * Γ^p_cb * g^aq
					*/
					int const a = dim+1;
					for (int b = 0; b < stDim; ++b) {
						sum += .5 * EFE_LL_minus_half_trace_at(env, gPrims, EFEs, iofs)(p, q) * GammaUUL_at(env, iofs, gPrims, GammaULLs)(a, b, b) * d1coeff_for_offset(-offset) * env->invdx(dim);
						sum -= .5 * EFE_LL_minus_half_trace_at(env, gPrims, EFEs, iofs)(p, b) * GammaUUL_at(env, iofs, gPrims, GammaULLs)(a, q, b) * d1coeff_for_offset(-offset) * env->invdx(dim);
						sum -= .5 * EFE_LL_minus_half_trace_at(env, gPrims, EFEs, iofs)(b, q) * GammaUUL_at(env, iofs, gPrims, GammaULLs)(a, p, b) * d1coeff_for_offset(-offset) * env->invdx(dim);
						for (int c = 0; c < stDim; ++c) {
							sum += .5 * EFE_LL_minus_half_trace_at(env, gPrims, EFEs, iofs)(b, c) * GammaULL_at(env, iofs, GammaULLs)(a, b, c) * gUU_from_gPrims_at(env, gPrims, iofs)(p, q) * d1coeff_for_offset(-offset) * env->invdx(dim);
						}
						sum -= EFE_LL_minus_half_trace_at(env, gPrims, EFEs, iofs)(a, q) * GammaUUL_at(env, iofs, gPrims, GammaULLs)(p, b, b) * d1coeff_for_offset(-offset) * env->invdx(dim);
						sum += EFE_LL_minus_half_trace_at(env, gPrims, EFEs, iofs)(a, b) * GammaUUL_at(env, iofs, gPrims, GammaULLs)(p, q, b) * d1coeff_for_offset(-offset) * env->invdx(dim);
						sum += EFE_LL_minus_half_trace_at(env, gPrims, EFEs, iofs)(b, q) * GammaUUL_at(env, iofs, gPrims, GammaULLs)(p, a, b) * d1coeff_for_offset(-offset) * env->invdx(dim);
						for (int c = 0; c < stDim; ++c) {
							sum -= EFE_LL_minus_half_trace_at(env, gPrims, EFEs, iofs)(b, c) * GammaULL_at(env, iofs, GammaULLs)(p, c, b) * gUU_from_gPrims_at(env, gPrims, iofs)(a, q) * d1coeff_for_offset(-offset) * env->invdx(dim);
						}
					}
				}
			}
#endif
#if 0
			// next calculate second-derivatives of ∂/∂g_pq terms:
			for (int dim1 = 0; dim1 < sDim; ++dim1) {
				for (int dim2 = 0; dim2 < sDim; ++dim2) {
					if (dim1 == dim2) {
						for (int offset = -<?=solver.diffOrder/2?>; offset <= <?=solver.diffOrder/2?>; ++offset) {
							int4 const iofs = i + int4_dir(dim1, offset);
							{
								// + (EFE_uv - 1/2 EFE_ab g_ab g^uv) 1/2 g^cd (∂/∂g_pq(x') D^2_ud[g_cv] = δ^p_c δ^q_v D^2 d2coeff_ud)
								// = + (EFE_uq - 1/2 EFE_ab g_ab g^uq) 1/2 g^pd (d2coeff_ud) |x'=x + dx^u=dx^d
								int const u = dim1+1;
								int const d = u;
								sum += .5 * EFE_LL_minus_half_trace_at(env, gPrims, EFEs, iofs)(u, q)
									* gUU_from_gPrims_at(env, gPrims, iofs)(p, d)
									* (d2coeffs[abs(offset)] * env->invdx(dim1));
							}{
								// + (EFE_uv - 1/2 EFE_ab g_ab g^uv) 1/2 g^cd (∂/∂g_pq(x') D^2_cv[g_ud] = δ^p_u δ^q_d D^2 d2coeff_cv)
								// = + (EFE_pv - 1/2 EFE_ab g_ab g^pv) 1/2 g^cq (d2coeff_cv) |x'=x + dx^v=dx^c
								int const v = dim1+1;
								int const c = v;
								sum += .5 * EFE_LL_minus_half_trace_at(env, gPrims, EFEs, iofs)(p, v)
									* gUU_from_gPrims_at(env, gPrims, iofs)(c, q)
									* (d2coeffs[abs(offset)] * env->invdx(dim1));
							}{
								// + (EFE_uv - 1/2 EFE_ab g_ab g^uv) 1/2 g^cd (∂/∂g_pq(x') D^2_cd[g_uv] = δ^p_u δ^q_v D^2 d2coeff_cd)
								// = + (EFE_pq - 1/2 EFE_ab g_ab g^pq) 1/2 g^cd (d2coeff_cd) |x'=x + dx^c=dx^d
								int const c = dim1+1;
								int const d = c;
								sum -= .5 * EFE_LL_minus_half_trace_at(env, gPrims, EFEs, iofs)(p, q)
									* gUU_from_gPrims_at(env, gPrims, iofs)(c, d)
									* (d2coeffs[abs(offset)] * env->invdx(dim1));
							}{
								// + (EFE_uv - 1/2 EFE_ab g_ab g^uv) 1/2 g^cd (∂/∂g_pq(x') D^2_uv[g_cd] = δ^p_c δ^q_d D^2 d2coeff_uv)
								// = + (EFE_uv - 1/2 EFE_ab g_ab g^uv) 1/2 g^pq (d2coeff_uv) |x'=x + dx^u=dx^v
								int const u = dim1+1;
								int const v = u;
								sum -= .5 * EFE_LL_minus_half_trace_at(env, gPrims, EFEs, iofs)(u, v)
									* gUU_from_gPrims_at(env, gPrims, iofs)(p, q)
									* (d2coeffs[abs(offset)] * env->invdx(dim1));
							}
						}
					} else {
						for (int offset1 = -<?=solver.diffOrder/2?>; offset1 <= <?=solver.diffOrder/2?>; ++offset1) {
							if (offset1 == 0) continue;
							for (int offset2 = -<?=solver.diffOrder/2?>; offset2 <= <?=solver.diffOrder/2?>; ++offset2) {
								if (offset2 == 0) continue;
								int4 const iofs = i + int4_dir(dim1, offset1) + int4_dir(dim2, offset2);
								{
									// + (EFE_uv - 1/2 EFE_ab g_ab g^uv) 1/2 g^cd (∂/∂g_pq(x') D^2_ud[g_cv] = δ^p_c δ^q_v D^2 d1coeff_u d1coeff_d)
									// = + (EFE_uq - 1/2 EFE_ab g_ab g^uq) 1/2 g^pd (d1coeff_u d1coeff_d) |x'=x + dx^u + dx^d
									int const u = dim1+1;
									int const d = dim2+1;
									int const offset_u = offset1;
									int const offset_d = offset2;
									sum += .5 * EFE_LL_minus_half_trace_at(env, gPrims, EFEs, iofs)(u, q)
										* gUU_from_gPrims_at(env, gPrims, iofs)(p, d)
										* (d1coeff_for_offset(-offset_u) * d1coeff_for_offset(-offset_d) * env->invdx(dim1) * env->invdx(dim2));
								}{
									// + (EFE_uv - 1/2 EFE_ab g_ab g^uv) 1/2 g^cd (∂/∂g_pq(x') D^2_cv[g_ud] = δ^p_u δ^q_d D^2 d1coeff_c d1coeff_v)
									// = + (EFE_pv - 1/2 EFE_ab g_ab g^pv) 1/2 g^cq (d1coeff_c d1coeff_v) |x'=x + dx^v + dx^c
									int const v = dim1+1;
									int const c = dim2+1;
									int const offset_v = offset1;
									int const offset_c = offset2;
									sum += .5 * EFE_LL_minus_half_trace_at(env, gPrims, EFEs, iofs)(p, v)
										* gUU_from_gPrims_at(env, gPrims, iofs)(c, q)
										* (d1coeff_for_offset(-offset_v) * d1coeff_for_offset(-offset_c) * env->invdx(dim1) * env->invdx(dim2));
								}{
									// + (EFE_uv - 1/2 EFE_ab g_ab g^uv) 1/2 g^cd (∂/∂g_pq(x') D^2_cd[g_uv] = δ^p_u δ^q_v D^2 d1coeff_c d1coeff_d)
									// = + (EFE_pq - 1/2 EFE_ab g_ab g^pq) 1/2 g^cd (d1coeff_c d1coeff_d) |x'=x + dx^c + dx^d
									int const c = dim1+1;
									int const d = dim2+1;
									int const offset_c = offset1;
									int const offset_d = offset2;
									sum -= .5 * EFE_LL_minus_half_trace_at(env, gPrims, EFEs, iofs)(p, q)
										* gUU_from_gPrims_at(env, gPrims, iofs)(c, d)
										* (d1coeff_for_offset(-offset_c) * d1coeff_for_offset(-offset_d) * env->invdx(dim1) * env->invdx(dim2));
								}{
									// + (EFE_uv - 1/2 EFE_ab g_ab g^uv) 1/2 g^cd (∂/∂g_pq(x') D^2_uv[g_cd] = δ^p_c δ^q_d D^2 d1coeff_u d1coeff_v)
									// = + (EFE_uv - 1/2 EFE_ab g_ab g^uv) 1/2 g^pq (d1coeff_u d1coeff_v) |x'=x + dx^u + dx^v
									int const u = dim1+1;
									int const v = dim2+1;
									int const offset_u = offset1;
									int const offset_v = offset2;
									sum -= .5 * EFE_LL_minus_half_trace_at(env, gPrims, EFEs, iofs)(u, v)
										* gUU_from_gPrims_at(env, gPrims, iofs)(p, q)
										* (d1coeff_for_offset(-offset_u) * d1coeff_for_offset(-offset_v) * env->invdx(dim1) * env->invdx(dim2));
								}
							}
						}
					}
				}
			}
#endif
			partial_gLL_of_Phi(p, q) = sum;
		}
	}

	return partial_gLL_of_Phi;
}

gPrim_t calc_partial_gPrim_of_Phi(
	constant env_t const * const env,
	global <?=TPrim_t?> const * const TPrims,
	global gPrim_t const * const gPrims,
	global real4x4s4 const * const GammaULLs,
	global real4s4 const * const EFEs,
	int4 const i
) {
	int const index = indexForInt4(i);

	auto const partial_gLL_of_Phi = calc_partial_gLL_of_Phi(env, TPrims, gPrims, GammaULLs, EFEs, i);

	auto const & gPrim = gPrims[index];
	auto const & gammaLL = gPrim.gammaLL;
	auto const & betaU = gPrim.betaU;
	auto const betaL = gammaLL * betaU;

	gPrim_t partial_gPrim_of_Phi;

	partial_gPrim_of_Phi.alpha = -2. * gPrim.alpha * partial_gLL_of_Phi(0, 0);
	for (int m = 0; m < sDim; ++m) {
		partial_gPrim_of_Phi.betaU(m) = 2. * partial_gLL_of_Phi(0, 0) * betaL(m);
		for (int n = 0; n < sDim; ++n) {
			partial_gPrim_of_Phi.betaU(m) += partial_gLL_of_Phi(0, n+1) * gammaLL(n, m);
		}
	}
	for (int m = 0; m < sDim; ++m) {
		for (int n = m; n < sDim; ++n) {
			partial_gPrim_of_Phi.gammaLL(m, n) =
				partial_gLL_of_Phi(m+1, n+1)
				+ betaU(m) * (
					  partial_gLL_of_Phi(0, 0) * betaU(n)
					+ 2. * partial_gLL_of_Phi(0, n+1)
				);
		}
	}

	return partial_gPrim_of_Phi;
}
